window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "labpy", "modulename": "labpy", "type": "module", "doc": "<p><code>labpython == 0.2.2</code></p>\n\n<h1 id=\"about\">About</h1>\n\n<p><strong>labpython</strong> (imported as <code>labpy</code>) is a collection of modules created to simplify gathering and processing experimental data. It also features a collection of modules inside <code>labpy.devices</code> namespace for high-level communication with various devices using <code>pyvisa</code> and <code>pydaqmx</code> backends. See <a href=\"https://franciszekjuras.github.io/labpy/labpy.html\">documentation</a> for detailed information.</p>\n\n<h1 id=\"installation\">Installation</h1>\n\n<p>Package can be installed from PyPI using:</p>\n\n<pre><code>pip install labpython\n</code></pre>\n\n<p>Or directly from github:</p>\n\n<pre><code>pip install https://github.com/franciszekjuras/labpy/tarball/master\n</code></pre>\n\n<p>Use <code>[full]</code> argument to install extra packages for data processing:</p>\n\n<pre><code>pip install labpython[full]\n</code></pre>\n\n<p>If you want to modify the package source code it's convenient to install it in developer mode. In order to do this:</p>\n\n<ul>\n<li>create and activate a <a href=\"https://docs.python.org/3/library/venv.html\">virtual environment</a>,</li>\n<li>clone or download repo from github,</li>\n<li>navigate to its main directory (the one in which this <code>README.md</code> resides),</li>\n<li>execute: <code>pip install -e .</code></li>\n<li>now you can use <code>import labpy</code> anywhere and any changes to the source code will be visible without reinstallation (if using jupyter kernel must be restarted)</li>\n</ul>\n\n<h1 id=\"documentation\">Documentation</h1>\n\n<p>Relatively recent documentation can be browsed <a href=\"https://franciszekjuras.github.io/labpy/labpy.html\">here</a>.\nIf you want to generate documentation yourself, you can use <code>pdoc</code>:</p>\n\n<pre><code>pip install pdoc\npdoc labpy\n</code></pre>\n"}, {"fullname": "labpy.devices", "modulename": "labpy.devices", "type": "module", "doc": "<p></p>\n"}, {"fullname": "labpy.devices.arduinopulsegen", "modulename": "labpy.devices.arduinopulsegen", "type": "module", "doc": "<p></p>\n"}, {"fullname": "labpy.devices.arduinopulsegen.ArduinoPulseGen", "modulename": "labpy.devices.arduinopulsegen", "qualname": "ArduinoPulseGen", "type": "class", "doc": "<p></p>\n"}, {"fullname": "labpy.devices.arduinopulsegen.ArduinoPulseGen.__init__", "modulename": "labpy.devices.arduinopulsegen", "qualname": "ArduinoPulseGen.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    rm: pyvisa.highlevel.ResourceManager,\n    dev: str,\n    useNiMaxSettings=True,\n    portmap={},\n    time_unit='ms',\n    **ignored\n)", "funcdef": "def"}, {"fullname": "labpy.devices.arduinopulsegen.ArduinoPulseGen.TimeUnit", "modulename": "labpy.devices.arduinopulsegen", "qualname": "ArduinoPulseGen.TimeUnit", "type": "class", "doc": "<p>An enumeration.</p>\n", "bases": "enum.Enum"}, {"fullname": "labpy.devices.arduinopulsegen.ArduinoPulseGen.TimeUnit.CYCLE", "modulename": "labpy.devices.arduinopulsegen", "qualname": "ArduinoPulseGen.TimeUnit.CYCLE", "type": "variable", "doc": "<p></p>\n", "default_value": " = <TimeUnit.CYCLE: 0>"}, {"fullname": "labpy.devices.arduinopulsegen.ArduinoPulseGen.TimeUnit.US", "modulename": "labpy.devices.arduinopulsegen", "qualname": "ArduinoPulseGen.TimeUnit.US", "type": "variable", "doc": "<p></p>\n", "default_value": " = <TimeUnit.US: 1>"}, {"fullname": "labpy.devices.arduinopulsegen.ArduinoPulseGen.TimeUnit.MS", "modulename": "labpy.devices.arduinopulsegen", "qualname": "ArduinoPulseGen.TimeUnit.MS", "type": "variable", "doc": "<p></p>\n", "default_value": " = <TimeUnit.MS: 2>"}, {"fullname": "labpy.devices.arduinopulsegen.ArduinoPulseGen.TimeUnit.S", "modulename": "labpy.devices.arduinopulsegen", "qualname": "ArduinoPulseGen.TimeUnit.S", "type": "variable", "doc": "<p></p>\n", "default_value": " = <TimeUnit.S: 3>"}, {"fullname": "labpy.devices.arduinopulsegen.ArduinoPulseGen.time_unit", "modulename": "labpy.devices.arduinopulsegen", "qualname": "ArduinoPulseGen.time_unit", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "labpy.devices.arduinopulsegen.ArduinoPulseGen.identity", "modulename": "labpy.devices.arduinopulsegen", "qualname": "ArduinoPulseGen.identity", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "labpy.devices.arduinopulsegen.ArduinoPulseGen.status", "modulename": "labpy.devices.arduinopulsegen", "qualname": "ArduinoPulseGen.status", "type": "function", "doc": "<p></p>\n", "signature": "(self, debug: bool = False)", "funcdef": "def"}, {"fullname": "labpy.devices.arduinopulsegen.ArduinoPulseGen.time_unit_store", "modulename": "labpy.devices.arduinopulsegen", "qualname": "ArduinoPulseGen.time_unit_store", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "labpy.devices.arduinopulsegen.ArduinoPulseGen.set_ch", "modulename": "labpy.devices.arduinopulsegen", "qualname": "ArduinoPulseGen.set_ch", "type": "function", "doc": "<p></p>\n", "signature": "(self, val, chs)", "funcdef": "def"}, {"fullname": "labpy.devices.arduinopulsegen.ArduinoPulseGen.xon", "modulename": "labpy.devices.arduinopulsegen", "qualname": "ArduinoPulseGen.xon", "type": "function", "doc": "<p></p>\n", "signature": "(self, chs)", "funcdef": "def"}, {"fullname": "labpy.devices.arduinopulsegen.ArduinoPulseGen.on", "modulename": "labpy.devices.arduinopulsegen", "qualname": "ArduinoPulseGen.on", "type": "function", "doc": "<p></p>\n", "signature": "(self, chs)", "funcdef": "def"}, {"fullname": "labpy.devices.arduinopulsegen.ArduinoPulseGen.off", "modulename": "labpy.devices.arduinopulsegen", "qualname": "ArduinoPulseGen.off", "type": "function", "doc": "<p></p>\n", "signature": "(self, chs=())", "funcdef": "def"}, {"fullname": "labpy.devices.arduinopulsegen.ArduinoPulseGen.add", "modulename": "labpy.devices.arduinopulsegen", "qualname": "ArduinoPulseGen.add", "type": "function", "doc": "<p></p>\n", "signature": "(self, chs, pulses)", "funcdef": "def"}, {"fullname": "labpy.devices.arduinopulsegen.ArduinoPulseGen.xadd", "modulename": "labpy.devices.arduinopulsegen", "qualname": "ArduinoPulseGen.xadd", "type": "function", "doc": "<p></p>\n", "signature": "(self, chs, pulses)", "funcdef": "def"}, {"fullname": "labpy.devices.arduinopulsegen.ArduinoPulseGen.reset", "modulename": "labpy.devices.arduinopulsegen", "qualname": "ArduinoPulseGen.reset", "type": "function", "doc": "<p></p>\n", "signature": "(self, ch=None)", "funcdef": "def"}, {"fullname": "labpy.devices.arduinopulsegen.ArduinoPulseGen.reset_full", "modulename": "labpy.devices.arduinopulsegen", "qualname": "ArduinoPulseGen.reset_full", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "labpy.devices.arduinopulsegen.ArduinoPulseGen.run", "modulename": "labpy.devices.arduinopulsegen", "qualname": "ArduinoPulseGen.run", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "labpy.devices.daqmx", "modulename": "labpy.devices.daqmx", "type": "module", "doc": "<p></p>\n"}, {"fullname": "labpy.devices.daqmx.DAQmx", "modulename": "labpy.devices.daqmx", "qualname": "DAQmx", "type": "class", "doc": "<p></p>\n"}, {"fullname": "labpy.devices.daqmx.DAQmx.__init__", "modulename": "labpy.devices.daqmx", "qualname": "DAQmx.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    dev: str = 'Dev1',\n    channels: Union[str, tuple] = (),\n    freq=1000.0,\n    time=0.01,\n    trig: str = None,\n    t0=0.0,\n    **ignored\n)", "funcdef": "def"}, {"fullname": "labpy.devices.daqmx.DAQmx.set_trigger", "modulename": "labpy.devices.daqmx", "qualname": "DAQmx.set_trigger", "type": "function", "doc": "<p></p>\n", "signature": "(self, trig, t0)", "funcdef": "def"}, {"fullname": "labpy.devices.daqmx.DAQmx.start", "modulename": "labpy.devices.daqmx", "qualname": "DAQmx.start", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "labpy.devices.daqmx.DAQmx.read", "modulename": "labpy.devices.daqmx", "qualname": "DAQmx.read", "type": "function", "doc": "<p></p>\n", "signature": "(self, timeout=None)", "funcdef": "def"}, {"fullname": "labpy.devices.daqmx.DAQmx.space", "modulename": "labpy.devices.daqmx", "qualname": "DAQmx.space", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "labpy.devices.daqmx.DAQmx.freq", "modulename": "labpy.devices.daqmx", "qualname": "DAQmx.freq", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "labpy.devices.daqmx.DAQmx.t0", "modulename": "labpy.devices.daqmx", "qualname": "DAQmx.t0", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "labpy.devices.daqmx.DAQmx.time", "modulename": "labpy.devices.daqmx", "qualname": "DAQmx.time", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "labpy.devices.daqmx.DAQmx.samples", "modulename": "labpy.devices.daqmx", "qualname": "DAQmx.samples", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "labpy.devices.daqmx.DAQmx.chs_n", "modulename": "labpy.devices.daqmx", "qualname": "DAQmx.chs_n", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "labpy.devices.dmt_cs", "modulename": "labpy.devices.dmt_cs", "type": "module", "doc": "<p></p>\n"}, {"fullname": "labpy.devices.dmt_cs.DmtCS", "modulename": "labpy.devices.dmt_cs", "qualname": "DmtCS", "type": "class", "doc": "<p></p>\n"}, {"fullname": "labpy.devices.dmt_cs.DmtCS.__init__", "modulename": "labpy.devices.dmt_cs", "qualname": "DmtCS.__init__", "type": "function", "doc": "<p>Initialize connection to DMT current source. Fail if connection cannot be established.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>rm</strong>: VISA resource manager, e.g. returned by <code>pyvisa.ResourceManager()</code></li>\n<li><strong>dev</strong> (str = 'DMT'):\ndevice name or alias, as returned by <code>labpy.utils.list_visa_devices</code> or visible in NI MAX</li>\n<li><strong>use_nimax_settings</strong> (bool = False):\nuse connection settings saved in NI MAX</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<p>Check connection to DMT current source (change device name if necessary):</p>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">pyvisa</span>\n<span class=\"n\">rm</span> <span class=\"o\">=</span> <span class=\"n\">pyvisa</span><span class=\"o\">.</span><span class=\"n\">ResourceManager</span><span class=\"p\">()</span>\n<span class=\"n\">dmt</span> <span class=\"o\">=</span> <span class=\"n\">DmtCS</span><span class=\"p\">(</span><span class=\"n\">rm</span><span class=\"p\">,</span> <span class=\"s1\">&#39;DMT&#39;</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">dmt</span><span class=\"o\">.</span><span class=\"n\">identity</span><span class=\"p\">)</span>\n</code></pre></div>\n", "signature": "(\n    self,\n    rm: pyvisa.highlevel.ResourceManager,\n    dev='DMT',\n    use_nimax_settings=False,\n    **ignored\n)", "funcdef": "def"}, {"fullname": "labpy.devices.dmt_cs.DmtCS.current", "modulename": "labpy.devices.dmt_cs", "qualname": "DmtCS.current", "type": "variable", "doc": "<p>Array-like property for setting and getting current (uA) in respective channel (numbered from 1)</p>\n\n<h6 id=\"examples\">Examples</h6>\n\n<p>Set current to 50.5 uA in channel 2:</p>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">dmt</span><span class=\"o\">.</span><span class=\"n\">curent</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mf\">50.5</span>\n</code></pre></div>\n\n<p>Get current to restore it later:</p>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">old_current</span> <span class=\"o\">=</span> <span class=\"n\">dmt</span><span class=\"o\">.</span><span class=\"n\">current</span><span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">]</span>\n<span class=\"n\">dmt</span><span class=\"o\">.</span><span class=\"n\">current</span><span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">42</span>\n<span class=\"o\">...</span>\n<span class=\"n\">dmt</span><span class=\"o\">.</span><span class=\"n\">current</span><span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">old_current</span>\n</code></pre></div>\n"}, {"fullname": "labpy.devices.dmt_cs.DmtCS.identity", "modulename": "labpy.devices.dmt_cs", "qualname": "DmtCS.identity", "type": "variable", "doc": "<p>Read only property returning identify string</p>\n"}, {"fullname": "labpy.devices.dmt_cs.DmtCS.set_current", "modulename": "labpy.devices.dmt_cs", "qualname": "DmtCS.set_current", "type": "function", "doc": "<p></p>\n", "signature": "(self, ch, v)", "funcdef": "def"}, {"fullname": "labpy.devices.dmt_cs.DmtCS.get_current", "modulename": "labpy.devices.dmt_cs", "qualname": "DmtCS.get_current", "type": "function", "doc": "<p></p>\n", "signature": "(self, ch)", "funcdef": "def"}, {"fullname": "labpy.devices.dmt_cs.DmtCS.set_high_range", "modulename": "labpy.devices.dmt_cs", "qualname": "DmtCS.set_high_range", "type": "function", "doc": "<p></p>\n", "signature": "(self, ch, v)", "funcdef": "def"}, {"fullname": "labpy.devices.dmt_cs.DmtCS.get_high_range", "modulename": "labpy.devices.dmt_cs", "qualname": "DmtCS.get_high_range", "type": "function", "doc": "<p></p>\n", "signature": "(self, ch)", "funcdef": "def"}, {"fullname": "labpy.devices.keithley_cs", "modulename": "labpy.devices.keithley_cs", "type": "module", "doc": "<p></p>\n"}, {"fullname": "labpy.devices.keithley_cs.KeithleyCS", "modulename": "labpy.devices.keithley_cs", "qualname": "KeithleyCS", "type": "class", "doc": "<p></p>\n"}, {"fullname": "labpy.devices.keithley_cs.KeithleyCS.__init__", "modulename": "labpy.devices.keithley_cs", "qualname": "KeithleyCS.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    rm: pyvisa.highlevel.ResourceManager,\n    dev='KEITHLEY',\n    **ignored\n)", "funcdef": "def"}, {"fullname": "labpy.devices.keithley_cs.KeithleyCS.current", "modulename": "labpy.devices.keithley_cs", "qualname": "KeithleyCS.current", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "labpy.devices.keithley_cs.KeithleyCS.set_sweep", "modulename": "labpy.devices.keithley_cs", "qualname": "KeithleyCS.set_sweep", "type": "function", "doc": "<p></p>\n", "signature": "(self, currents: list, trig_line: int = 1, count: int = 1)", "funcdef": "def"}, {"fullname": "labpy.devices.keithley_cs.KeithleyCS.init", "modulename": "labpy.devices.keithley_cs", "qualname": "KeithleyCS.init", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "labpy.devices.keithley_cs.KeithleyCS.set_remote_only", "modulename": "labpy.devices.keithley_cs", "qualname": "KeithleyCS.set_remote_only", "type": "function", "doc": "<p></p>\n", "signature": "(self, b: bool = True)", "funcdef": "def"}, {"fullname": "labpy.devices.keithley_cs.KeithleyCS.on", "modulename": "labpy.devices.keithley_cs", "qualname": "KeithleyCS.on", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "labpy.devices.keithley_cs.KeithleyCS.off", "modulename": "labpy.devices.keithley_cs", "qualname": "KeithleyCS.off", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "labpy.devices.srs", "modulename": "labpy.devices.srs", "type": "module", "doc": "<p></p>\n"}, {"fullname": "labpy.devices.srs.Srs", "modulename": "labpy.devices.srs", "qualname": "Srs", "type": "class", "doc": "<p></p>\n"}, {"fullname": "labpy.devices.srs.Srs.__init__", "modulename": "labpy.devices.srs", "qualname": "Srs.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    rm: pyvisa.highlevel.ResourceManager,\n    dev='Lock-in',\n    auxout_map={},\n    auxin_map={},\n    settings={},\n    **ignored\n)", "funcdef": "def"}, {"fullname": "labpy.devices.srs.Srs.Trigger", "modulename": "labpy.devices.srs", "qualname": "Srs.Trigger", "type": "class", "doc": "<p>An enumeration.</p>\n", "bases": "enum.Enum"}, {"fullname": "labpy.devices.srs.Srs.Trigger.SINE_ZERO", "modulename": "labpy.devices.srs", "qualname": "Srs.Trigger.SINE_ZERO", "type": "variable", "doc": "<p></p>\n", "default_value": " = <Trigger.SINE_ZERO: 0>"}, {"fullname": "labpy.devices.srs.Srs.Trigger.RISING", "modulename": "labpy.devices.srs", "qualname": "Srs.Trigger.RISING", "type": "variable", "doc": "<p></p>\n", "default_value": " = <Trigger.RISING: 1>"}, {"fullname": "labpy.devices.srs.Srs.Trigger.FALLING", "modulename": "labpy.devices.srs", "qualname": "Srs.Trigger.FALLING", "type": "variable", "doc": "<p></p>\n", "default_value": " = <Trigger.FALLING: 2>"}, {"fullname": "labpy.devices.srs.Srs.Source", "modulename": "labpy.devices.srs", "qualname": "Srs.Source", "type": "class", "doc": "<p>An enumeration.</p>\n", "bases": "enum.Enum"}, {"fullname": "labpy.devices.srs.Srs.Source.EXTERNAL", "modulename": "labpy.devices.srs", "qualname": "Srs.Source.EXTERNAL", "type": "variable", "doc": "<p></p>\n", "default_value": " = <Source.EXTERNAL: 0>"}, {"fullname": "labpy.devices.srs.Srs.Source.INTERNAL", "modulename": "labpy.devices.srs", "qualname": "Srs.Source.INTERNAL", "type": "variable", "doc": "<p></p>\n", "default_value": " = <Source.INTERNAL: 1>"}, {"fullname": "labpy.devices.srs.Srs.Reserve", "modulename": "labpy.devices.srs", "qualname": "Srs.Reserve", "type": "class", "doc": "<p>An enumeration.</p>\n", "bases": "enum.Enum"}, {"fullname": "labpy.devices.srs.Srs.Reserve.HIGH_RESERVE", "modulename": "labpy.devices.srs", "qualname": "Srs.Reserve.HIGH_RESERVE", "type": "variable", "doc": "<p></p>\n", "default_value": " = <Reserve.HIGH_RESERVE: 0>"}, {"fullname": "labpy.devices.srs.Srs.Reserve.NORMAL", "modulename": "labpy.devices.srs", "qualname": "Srs.Reserve.NORMAL", "type": "variable", "doc": "<p></p>\n", "default_value": " = <Reserve.NORMAL: 1>"}, {"fullname": "labpy.devices.srs.Srs.Reserve.LOW_NOISE", "modulename": "labpy.devices.srs", "qualname": "Srs.Reserve.LOW_NOISE", "type": "variable", "doc": "<p></p>\n", "default_value": " = <Reserve.LOW_NOISE: 2>"}, {"fullname": "labpy.devices.srs.Srs.Input", "modulename": "labpy.devices.srs", "qualname": "Srs.Input", "type": "class", "doc": "<p>An enumeration.</p>\n", "bases": "enum.Enum"}, {"fullname": "labpy.devices.srs.Srs.Input.X", "modulename": "labpy.devices.srs", "qualname": "Srs.Input.X", "type": "variable", "doc": "<p></p>\n", "default_value": " = <Input.X: 1>"}, {"fullname": "labpy.devices.srs.Srs.Input.Y", "modulename": "labpy.devices.srs", "qualname": "Srs.Input.Y", "type": "variable", "doc": "<p></p>\n", "default_value": " = <Input.Y: 2>"}, {"fullname": "labpy.devices.srs.Srs.Input.R", "modulename": "labpy.devices.srs", "qualname": "Srs.Input.R", "type": "variable", "doc": "<p></p>\n", "default_value": " = <Input.R: 3>"}, {"fullname": "labpy.devices.srs.Srs.Input.TH", "modulename": "labpy.devices.srs", "qualname": "Srs.Input.TH", "type": "variable", "doc": "<p></p>\n", "default_value": " = <Input.TH: 4>"}, {"fullname": "labpy.devices.srs.Srs.Input.AUX1", "modulename": "labpy.devices.srs", "qualname": "Srs.Input.AUX1", "type": "variable", "doc": "<p></p>\n", "default_value": " = <Input.AUX1: 5>"}, {"fullname": "labpy.devices.srs.Srs.Input.AUX2", "modulename": "labpy.devices.srs", "qualname": "Srs.Input.AUX2", "type": "variable", "doc": "<p></p>\n", "default_value": " = <Input.AUX2: 6>"}, {"fullname": "labpy.devices.srs.Srs.Input.AUX3", "modulename": "labpy.devices.srs", "qualname": "Srs.Input.AUX3", "type": "variable", "doc": "<p></p>\n", "default_value": " = <Input.AUX3: 7>"}, {"fullname": "labpy.devices.srs.Srs.Input.AUX4", "modulename": "labpy.devices.srs", "qualname": "Srs.Input.AUX4", "type": "variable", "doc": "<p></p>\n", "default_value": " = <Input.AUX4: 8>"}, {"fullname": "labpy.devices.srs.Srs.Input.FREQ", "modulename": "labpy.devices.srs", "qualname": "Srs.Input.FREQ", "type": "variable", "doc": "<p></p>\n", "default_value": " = <Input.FREQ: 9>"}, {"fullname": "labpy.devices.srs.Srs.Input.DISP1", "modulename": "labpy.devices.srs", "qualname": "Srs.Input.DISP1", "type": "variable", "doc": "<p></p>\n", "default_value": " = <Input.DISP1: 10>"}, {"fullname": "labpy.devices.srs.Srs.Input.DISP2", "modulename": "labpy.devices.srs", "qualname": "Srs.Input.DISP2", "type": "variable", "doc": "<p></p>\n", "default_value": " = <Input.DISP2: 11>"}, {"fullname": "labpy.devices.srs.Srs.Sensitivity", "modulename": "labpy.devices.srs", "qualname": "Srs.Sensitivity", "type": "variable", "doc": "<p></p>\n", "default_value": " = {'2 nV': 0, '5 nV': 1, '10 nV': 2, '20 nV': 3, '50 nV': 4, '100 nV': 5, '200 nV': 6, '500 nV': 7, '1 uV': 8, '2 uV': 9, '5 uV': 10, '10 uV': 11, '20 uV': 12, '50 uV': 13, '100 uV': 14, '200 uV': 15, '500 uV': 16, '1 mV': 17, '2 mV': 18, '5 mV': 19, '10 mV': 20, '20 mV': 21, '50 mV': 22, '100 mV': 23, '200 mV': 24, '500 mV': 25, '1 V': 26}"}, {"fullname": "labpy.devices.srs.Srs.SensitivityInv", "modulename": "labpy.devices.srs", "qualname": "Srs.SensitivityInv", "type": "variable", "doc": "<p></p>\n", "default_value": " = {0: '2 nV', 1: '5 nV', 2: '10 nV', 3: '20 nV', 4: '50 nV', 5: '100 nV', 6: '200 nV', 7: '500 nV', 8: '1 uV', 9: '2 uV', 10: '5 uV', 11: '10 uV', 12: '20 uV', 13: '50 uV', 14: '100 uV', 15: '200 uV', 16: '500 uV', 17: '1 mV', 18: '2 mV', 19: '5 mV', 20: '10 mV', 21: '20 mV', 22: '50 mV', 23: '100 mV', 24: '200 mV', 25: '500 mV', 26: '1 V'}"}, {"fullname": "labpy.devices.srs.Srs.TimeConstant", "modulename": "labpy.devices.srs", "qualname": "Srs.TimeConstant", "type": "variable", "doc": "<p></p>\n", "default_value": " = {'10 us': 0, '30 us': 1, '100 us': 2, '300 us': 3, '1 ms': 4, '3 ms': 5, '10 ms': 6, '30 ms': 7, '100 ms': 8, '300 ms': 9, '1 s': 10, '3 s': 11, '10 s': 12, '30 s': 13, '100 s': 14, '300 s': 15, '1 ks': 16, '3 ks': 17, '10 ks': 18, '30 ks': 19}"}, {"fullname": "labpy.devices.srs.Srs.TimeConstantInv", "modulename": "labpy.devices.srs", "qualname": "Srs.TimeConstantInv", "type": "variable", "doc": "<p></p>\n", "default_value": " = {0: '10 us', 1: '30 us', 2: '100 us', 3: '300 us', 4: '1 ms', 5: '3 ms', 6: '10 ms', 7: '30 ms', 8: '100 ms', 9: '300 ms', 10: '1 s', 11: '3 s', 12: '10 s', 13: '30 s', 14: '100 s', 15: '300 s', 16: '1 ks', 17: '3 ks', 18: '10 ks', 19: '30 ks'}"}, {"fullname": "labpy.devices.srs.Srs.FilterSlope", "modulename": "labpy.devices.srs", "qualname": "Srs.FilterSlope", "type": "variable", "doc": "<p></p>\n", "default_value": " = {'6 dB/oct': 0, '12 dB/oct': 1, '18 dB/oct': 2, '24 dB/oct': 3}"}, {"fullname": "labpy.devices.srs.Srs.FilterSlopeInv", "modulename": "labpy.devices.srs", "qualname": "Srs.FilterSlopeInv", "type": "variable", "doc": "<p></p>\n", "default_value": " = {0: '6 dB/oct', 1: '12 dB/oct', 2: '18 dB/oct', 3: '24 dB/oct'}"}, {"fullname": "labpy.devices.srs.Srs.setup", "modulename": "labpy.devices.srs", "qualname": "Srs.setup", "type": "function", "doc": "<p></p>\n", "signature": "(self, attrs: dict)", "funcdef": "def"}, {"fullname": "labpy.devices.srs.Srs.identity", "modulename": "labpy.devices.srs", "qualname": "Srs.identity", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "labpy.devices.srs.Srs.source", "modulename": "labpy.devices.srs", "qualname": "Srs.source", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "labpy.devices.srs.Srs.reserve", "modulename": "labpy.devices.srs", "qualname": "Srs.reserve", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "labpy.devices.srs.Srs.frequency", "modulename": "labpy.devices.srs", "qualname": "Srs.frequency", "type": "variable", "doc": "<p>Some property getter</p>\n"}, {"fullname": "labpy.devices.srs.Srs.phase", "modulename": "labpy.devices.srs", "qualname": "Srs.phase", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "labpy.devices.srs.Srs.harmonic", "modulename": "labpy.devices.srs", "qualname": "Srs.harmonic", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "labpy.devices.srs.Srs.sensitivity", "modulename": "labpy.devices.srs", "qualname": "Srs.sensitivity", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "labpy.devices.srs.Srs.time_constant", "modulename": "labpy.devices.srs", "qualname": "Srs.time_constant", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "labpy.devices.srs.Srs.filter_slope", "modulename": "labpy.devices.srs", "qualname": "Srs.filter_slope", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "labpy.devices.srs.Srs.snap", "modulename": "labpy.devices.srs", "qualname": "Srs.snap", "type": "function", "doc": "<p></p>\n", "signature": "(self, params)", "funcdef": "def"}, {"fullname": "labpy.devices.srs.Srs.demod", "modulename": "labpy.devices.srs", "qualname": "Srs.demod", "type": "function", "doc": "<p></p>\n", "signature": "(self, param)", "funcdef": "def"}, {"fullname": "labpy.devices.srs.Srs.auxin", "modulename": "labpy.devices.srs", "qualname": "Srs.auxin", "type": "function", "doc": "<p></p>\n", "signature": "(self, num)", "funcdef": "def"}, {"fullname": "labpy.devices.srs.Srs.auxout", "modulename": "labpy.devices.srs", "qualname": "Srs.auxout", "type": "function", "doc": "<p></p>\n", "signature": "(self, num, value: float = None)", "funcdef": "def"}, {"fullname": "labpy.devices.srs.Srs.x", "modulename": "labpy.devices.srs", "qualname": "Srs.x", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "labpy.devices.srs.Srs.y", "modulename": "labpy.devices.srs", "qualname": "Srs.y", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "labpy.devices.srs.Srs.r", "modulename": "labpy.devices.srs", "qualname": "Srs.r", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "labpy.devices.srs.Srs.th", "modulename": "labpy.devices.srs", "qualname": "Srs.th", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "labpy.devices.srs.Srs.xy", "modulename": "labpy.devices.srs", "qualname": "Srs.xy", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "labpy.devices.srs.Srs.rth", "modulename": "labpy.devices.srs", "qualname": "Srs.rth", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "labpy.devices.tb3000_aom_driver", "modulename": "labpy.devices.tb3000_aom_driver", "type": "module", "doc": "<p></p>\n"}, {"fullname": "labpy.devices.tb3000_aom_driver.TB3000AomDriver", "modulename": "labpy.devices.tb3000_aom_driver", "qualname": "TB3000AomDriver", "type": "class", "doc": "<p></p>\n"}, {"fullname": "labpy.devices.tb3000_aom_driver.TB3000AomDriver.__init__", "modulename": "labpy.devices.tb3000_aom_driver", "qualname": "TB3000AomDriver.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    rm: pyvisa.highlevel.ResourceManager,\n    dev: str,\n    use_nimax_settings=True,\n    **ignored\n)", "funcdef": "def"}, {"fullname": "labpy.devices.tb3000_aom_driver.TB3000AomDriver.identity", "modulename": "labpy.devices.tb3000_aom_driver", "qualname": "TB3000AomDriver.identity", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "labpy.devices.tb3000_aom_driver.TB3000AomDriver.amplitude", "modulename": "labpy.devices.tb3000_aom_driver", "qualname": "TB3000AomDriver.amplitude", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "labpy.devices.tb3000_aom_driver.TB3000AomDriver.output", "modulename": "labpy.devices.tb3000_aom_driver", "qualname": "TB3000AomDriver.output", "type": "function", "doc": "<p></p>\n", "signature": "(self, set=True)", "funcdef": "def"}, {"fullname": "labpy.devices.wavemeter", "modulename": "labpy.devices.wavemeter", "type": "module", "doc": "<p></p>\n"}, {"fullname": "labpy.devices.wavemeter.Wavemeter", "modulename": "labpy.devices.wavemeter", "qualname": "Wavemeter", "type": "class", "doc": "<p></p>\n"}, {"fullname": "labpy.devices.wavemeter.Wavemeter.__init__", "modulename": "labpy.devices.wavemeter", "qualname": "Wavemeter.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    rm: pyvisa.highlevel.ResourceManager,\n    computer_name: str = 'Wavemeter',\n    port: int = 8001,\n    **ignored\n)", "funcdef": "def"}, {"fullname": "labpy.devices.wavemeter.Wavemeter.identity", "modulename": "labpy.devices.wavemeter", "qualname": "Wavemeter.identity", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "labpy.devices.wavemeter.Wavemeter.frequency", "modulename": "labpy.devices.wavemeter", "qualname": "Wavemeter.frequency", "type": "function", "doc": "<p></p>\n", "signature": "(self, channels: Union[int, tuple])", "funcdef": "def"}, {"fullname": "labpy.devices.wavemeter.Wavemeter.wavelength", "modulename": "labpy.devices.wavemeter", "qualname": "Wavemeter.wavelength", "type": "function", "doc": "<p></p>\n", "signature": "(self, channels: Union[int, tuple])", "funcdef": "def"}, {"fullname": "labpy.dsp", "modulename": "labpy.dsp", "type": "module", "doc": "<p></p>\n"}, {"fullname": "labpy.dsp.fft", "modulename": "labpy.dsp", "qualname": "fft", "type": "function", "doc": "<p></p>\n", "signature": "(ser, pad=1)", "funcdef": "def"}, {"fullname": "labpy.dsp.filter", "modulename": "labpy.dsp", "qualname": "filter", "type": "function", "doc": "<p></p>\n", "signature": "(ser, ker)", "funcdef": "def"}, {"fullname": "labpy.dsp.project", "modulename": "labpy.dsp", "qualname": "project", "type": "function", "doc": "<p></p>\n", "signature": "(ser, t0, lag=None, forward=False, taps=None, trend='c', info={})", "funcdef": "def"}, {"fullname": "labpy.scpi_parser", "modulename": "labpy.scpi_parser", "type": "module", "doc": "<p></p>\n"}, {"fullname": "labpy.scpi_parser.ScpiParser", "modulename": "labpy.scpi_parser", "qualname": "ScpiParser", "type": "class", "doc": "<p></p>\n"}, {"fullname": "labpy.scpi_parser.ScpiParser.__init__", "modulename": "labpy.scpi_parser", "qualname": "ScpiParser.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "labpy.scpi_parser.ScpiParser.register", "modulename": "labpy.scpi_parser", "qualname": "ScpiParser.register", "type": "function", "doc": "<p></p>\n", "signature": "(self, cmd_form, fun)", "funcdef": "def"}, {"fullname": "labpy.scpi_parser.ScpiParser.process", "modulename": "labpy.scpi_parser", "qualname": "ScpiParser.process", "type": "function", "doc": "<p></p>\n", "signature": "(self, data)", "funcdef": "def"}, {"fullname": "labpy.series", "modulename": "labpy.series", "type": "module", "doc": "<p></p>\n"}, {"fullname": "labpy.series.Series", "modulename": "labpy.series", "qualname": "Series", "type": "class", "doc": "<p></p>\n"}, {"fullname": "labpy.series.Series.__init__", "modulename": "labpy.series", "qualname": "Series.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    y: numpy.ndarray,\n    x: Union[numpy.ndarray, tuple, float] = None,\n    freq=None\n)", "funcdef": "def"}, {"fullname": "labpy.series.Series.copy", "modulename": "labpy.series", "qualname": "Series.copy", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "labpy.series.Series.copy_y", "modulename": "labpy.series", "qualname": "Series.copy_y", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "labpy.series.Series.decimate", "modulename": "labpy.series", "qualname": "Series.decimate", "type": "function", "doc": "<p></p>\n", "signature": "(self, samples: int = None, freq: float = None)", "funcdef": "def"}, {"fullname": "labpy.series.Series.xy", "modulename": "labpy.series", "qualname": "Series.xy", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "labpy.series.Series.x", "modulename": "labpy.series", "qualname": "Series.x", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "labpy.series.Series.y", "modulename": "labpy.series", "qualname": "Series.y", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "labpy.series.Series.range", "modulename": "labpy.series", "qualname": "Series.range", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "labpy.series.Series.dx", "modulename": "labpy.series", "qualname": "Series.dx", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "labpy.series.Series.freq", "modulename": "labpy.series", "qualname": "Series.freq", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "labpy.series.Series.apply", "modulename": "labpy.series", "qualname": "Series.apply", "type": "function", "doc": "<p></p>\n", "signature": "(self, fun)", "funcdef": "def"}, {"fullname": "labpy.series.Series.slice", "modulename": "labpy.series", "qualname": "Series.slice", "type": "function", "doc": "<p></p>\n", "signature": "(self, l=-inf, r=inf, rel=False)", "funcdef": "def"}, {"fullname": "labpy.series.Series.cut", "modulename": "labpy.series", "qualname": "Series.cut", "type": "function", "doc": "<p></p>\n", "signature": "(self, l=-inf, r=inf)", "funcdef": "def"}, {"fullname": "labpy.series.Series.extend", "modulename": "labpy.series", "qualname": "Series.extend", "type": "function", "doc": "<p></p>\n", "signature": "(self, l=None, r=None, rel=False)", "funcdef": "def"}, {"fullname": "labpy.series.Series.split", "modulename": "labpy.series", "qualname": "Series.split", "type": "function", "doc": "<p></p>\n", "signature": "(self, s, rel=False)", "funcdef": "def"}, {"fullname": "labpy.series.Series.part", "modulename": "labpy.series", "qualname": "Series.part", "type": "function", "doc": "<p></p>\n", "signature": "(self, beg=0.0, end=1.0)", "funcdef": "def"}, {"fullname": "labpy.series.Series.find_idx", "modulename": "labpy.series", "qualname": "Series.find_idx", "type": "function", "doc": "<p></p>\n", "signature": "(v, range, norm=True)", "funcdef": "def"}, {"fullname": "labpy.series.Series.from2darray", "modulename": "labpy.series", "qualname": "Series.from2darray", "type": "function", "doc": "<p></p>\n", "signature": "(y2d: numpy.ndarray, *args)", "funcdef": "def"}, {"fullname": "labpy.series.Series.calc_x", "modulename": "labpy.series", "qualname": "Series.calc_x", "type": "function", "doc": "<p></p>\n", "signature": "(y: numpy.ndarray, x: Union[numpy.ndarray, tuple, float], freq=None)", "funcdef": "def"}, {"fullname": "labpy.series.Series.abs", "modulename": "labpy.series", "qualname": "Series.abs", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "labpy.series.Series.real", "modulename": "labpy.series", "qualname": "Series.real", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "labpy.series.Series.imag", "modulename": "labpy.series", "qualname": "Series.imag", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "labpy.series.Series.angle", "modulename": "labpy.series", "qualname": "Series.angle", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "labpy.series.Average", "modulename": "labpy.series", "qualname": "Average", "type": "class", "doc": "<p></p>\n"}, {"fullname": "labpy.series.Average.__init__", "modulename": "labpy.series", "qualname": "Average.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(self, v=None)", "funcdef": "def"}, {"fullname": "labpy.series.Average.add", "modulename": "labpy.series", "qualname": "Average.add", "type": "function", "doc": "<p></p>\n", "signature": "(self, v)", "funcdef": "def"}, {"fullname": "labpy.series.Average.value", "modulename": "labpy.series", "qualname": "Average.value", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "labpy.server", "modulename": "labpy.server", "type": "module", "doc": "<p></p>\n"}, {"fullname": "labpy.server.Server", "modulename": "labpy.server", "qualname": "Server", "type": "class", "doc": "<p></p>\n"}, {"fullname": "labpy.server.Server.__init__", "modulename": "labpy.server", "qualname": "Server.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "labpy.server.Server.accept_wrapper", "modulename": "labpy.server", "qualname": "Server.accept_wrapper", "type": "function", "doc": "<p></p>\n", "signature": "(self, sock)", "funcdef": "def"}, {"fullname": "labpy.server.Server.service_connection", "modulename": "labpy.server", "qualname": "Server.service_connection", "type": "function", "doc": "<p></p>\n", "signature": "(self, key, mask)", "funcdef": "def"}, {"fullname": "labpy.server.Server.parse_data", "modulename": "labpy.server", "qualname": "Server.parse_data", "type": "function", "doc": "<p></p>\n", "signature": "(self, data, id)", "funcdef": "def"}, {"fullname": "labpy.server.Server.process_data", "modulename": "labpy.server", "qualname": "Server.process_data", "type": "function", "doc": "<p></p>\n", "signature": "(self, msgs)", "funcdef": "def"}, {"fullname": "labpy.server.Server.run", "modulename": "labpy.server", "qualname": "Server.run", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "labpy.types", "modulename": "labpy.types", "type": "module", "doc": "<p></p>\n"}, {"fullname": "labpy.types.DataList", "modulename": "labpy.types", "qualname": "DataList", "type": "class", "doc": "<p>Built-in mutable sequence.</p>\n\n<p>If no argument is given, the constructor creates a new empty list.\nThe argument must be an iterable if specified.</p>\n", "bases": "builtins.list"}, {"fullname": "labpy.types.DataList.__init__", "modulename": "labpy.types", "qualname": "DataList.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(self, init=[])", "funcdef": "def"}, {"fullname": "labpy.types.DataList.info", "modulename": "labpy.types", "qualname": "DataList.info", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "labpy.types.DataList.data", "modulename": "labpy.types", "qualname": "DataList.data", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "labpy.types.IndexedProperty", "modulename": "labpy.types", "qualname": "IndexedProperty", "type": "class", "doc": "<p></p>\n"}, {"fullname": "labpy.types.IndexedProperty.__init__", "modulename": "labpy.types", "qualname": "IndexedProperty.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(self, getter=None, setter=None)", "funcdef": "def"}, {"fullname": "labpy.types.NestedDict", "modulename": "labpy.types", "qualname": "NestedDict", "type": "class", "doc": "<p>dict() -> new empty dictionary\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs\ndict(iterable) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in iterable:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)</p>\n", "bases": "builtins.dict"}, {"fullname": "labpy.types.NestedDict.__init__", "modulename": "labpy.types", "qualname": "NestedDict.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(self, dict={})", "funcdef": "def"}, {"fullname": "labpy.types.NestedDict.copy", "modulename": "labpy.types", "qualname": "NestedDict.copy", "type": "function", "doc": "<p>D.copy() -> a shallow copy of D</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "labpy.types.NestedDict.get", "modulename": "labpy.types", "qualname": "NestedDict.get", "type": "function", "doc": "<p>Return the value for key if key is in the dictionary, else default.</p>\n", "signature": "(self, idx, dflt=None)", "funcdef": "def"}, {"fullname": "labpy.types.NestedDict.update", "modulename": "labpy.types", "qualname": "NestedDict.update", "type": "function", "doc": "<p>D.update([E, ]**F) -> None.  Update D from dict/iterable E and F.\nIf E is present and has a .keys() method, then does:  for k in E: D[k] = E[k]\nIf E is present and lacks a .keys() method, then does:  for k, v in E: D[k] = v\nIn either case, this is followed by: for k in F:  D[k] = F[k]</p>\n", "signature": "(self, *args, **kwargs)", "funcdef": "def"}, {"fullname": "labpy.utils", "modulename": "labpy.utils", "type": "module", "doc": "<p></p>\n"}, {"fullname": "labpy.utils.str_to_value", "modulename": "labpy.utils", "qualname": "str_to_value", "type": "function", "doc": "<p></p>\n", "signature": "(s, base=1.0)", "funcdef": "def"}, {"fullname": "labpy.utils.json_dumps_compact", "modulename": "labpy.utils", "qualname": "json_dumps_compact", "type": "function", "doc": "<p></p>\n", "signature": "(data)", "funcdef": "def"}, {"fullname": "labpy.utils.check_type", "modulename": "labpy.utils", "qualname": "check_type", "type": "function", "doc": "<p></p>\n", "signature": "(types, *vars)", "funcdef": "def"}, {"fullname": "labpy.utils.floatify", "modulename": "labpy.utils", "qualname": "floatify", "type": "function", "doc": "<p></p>\n", "signature": "(v, precision=6)", "funcdef": "def"}, {"fullname": "labpy.utils.intify", "modulename": "labpy.utils", "qualname": "intify", "type": "function", "doc": "<p></p>\n", "signature": "(v)", "funcdef": "def"}, {"fullname": "labpy.utils.to_enum", "modulename": "labpy.utils", "qualname": "to_enum", "type": "function", "doc": "<p></p>\n", "signature": "(v, Type)", "funcdef": "def"}, {"fullname": "labpy.utils.list_visa_devices", "modulename": "labpy.utils", "qualname": "list_visa_devices", "type": "function", "doc": "<p></p>\n", "signature": "(rm)", "funcdef": "def"}, {"fullname": "labpy.utils.in_bounds", "modulename": "labpy.utils", "qualname": "in_bounds", "type": "function", "doc": "<p></p>\n", "signature": "(value, bounds, margin=1e-06, rel=0.0)", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();